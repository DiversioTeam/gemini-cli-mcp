[project]
name = "gemini-mcp"
version = "0.1.0"
description = "MCP server providing integration with Google's Gemini CLI - an unofficial tool"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Diversio Team", email = "tech@diversio.com"},
]
keywords = ["mcp", "gemini", "ai", "research", "cli", "llm", "tool"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "mcp>=0.1.0",
    "pydantic>=2.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/DiversioTeam/gemini-cli-mcp"
Repository = "https://github.com/DiversioTeam/gemini-cli-mcp"
Issues = "https://github.com/DiversioTeam/gemini-cli-mcp/issues"
Documentation = "https://github.com/DiversioTeam/gemini-cli-mcp#readme"

[project.scripts]
gemini-mcp = "gemini_mcp.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/gemini_mcp"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "RUF", # ruff-specific rules
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "UP",  # pyupgrade
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src/gemini_mcp",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/gemini_mcp"]
omit = ["*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = ["B101"]  # Skip assert_used test

[dependency-groups]
dev = [
    "types-aiofiles>=24.1.0.20250606",
]
